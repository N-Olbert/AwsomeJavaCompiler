grammar awsomeJava;

programm: jClass+;
jClass: AccessModifier? 'class' Identifier classBody;
constructor: AccessModifier? Identifier'('nMethodParameters')' block;
mainMethod: AccessModifier 'static' Void 'main' '(String[]' 'args)' block;
classBody: '{'(methodDeclaration|fieldDeclaration)* constructor? mainMethod? (methodDeclaration|fieldDeclaration)*'}';
methodDeclaration: AccessModifier? (objectType|Void) Identifier '('nMethodParameters')' block;
fieldDeclaration: AccessModifier?  objectType Identifier (EQUAL expression)? ';';
methodParameter: objectType Identifier;
nMethodParameters: (methodParameter)? | methodParameter (','methodParameter)+;

nArguments: expression? | expression (',' expression)* | instVar;
expression:  basicexpressions | statementExpressions | '(' expression ')';
basicexpressions:  baseType | instVar | Identifier | unary ;
instVar:  This '.' Identifier|(This '.')? (Identifier '.')+ Identifier | Super '.' Identifier
    | (Super'.')? (Identifier'.')+ Identifier;
statementExpressions: (assign | jNew | methodCall | unary | binary)';';
assign: (instVar | Identifier) (EQUAL|PLUSEQUAL|MINUSEQUAL) expression;
localVarDeclaration: objectType Identifier ((EQUAL|PLUSEQUAL|MINUSEQUAL) expression);
jNew: 'new' Identifier '('nArguments')';
methodCall: (instVar'.')? Identifier'('nArguments')';
statement: ifelse | localVarDeclaration';' | jReturn';' | jWhile | block | assign';' | binary | statementExpressions;
block: '{' (statement)* '}';
ifelse: jIf jElseIf* jElse?;
jIf: If '(' expression ')' block;
jElseIf: Else If'(' expression ')' block;
jElse: Else block;
jWhile: 'while ('expression ')' block;
jReturn: 'return' expression;
unary:  operatorBeforeExpr | operatorAfterExpr;
binary: basicexpressions (operators basicexpressions)+;
operatorBeforeExpr: (OpBeforeIdentifier|OpBeforeOrAfterIdentifier) (Identifier|instVar);
operatorAfterExpr: (Identifier|instVar) OpBeforeOrAfterIdentifier;
baseType: JBoolean | JNull | This | JString | JCharacter | JInteger | Super;
objectType: 'int'|'char'|'boolean'|'String'|Identifier;
operators: LogicalOperator|Comperator|AddSubOperator|PointOperator;

AccessModifier: 'public' | 'protected' | 'private';
JBoolean: 'true'|'false';
JNull: 'null';
Void: 'void';
Super: 'super';
This: 'this';
If: 'if';
Else: 'else';
EQUAL: '=';
PLUSEQUAL: '+=';
MINUSEQUAL: '-=';
Comperator: '=='|'!='|'>='|'<='|'>'|'<';
OpBeforeIdentifier: '!';
OpBeforeOrAfterIdentifier: '++'|'--';
PointOperator: '*'|'/';
AddSubOperator: '+'|'-';
LogicalOperator: '&&'|'||';
JString: '"'[A-Za-z]'"'+;
Identifier: [A-Za-z]+;
JCharacter: '\'' [A-Za-z]'\'';
JInteger: [0-9]+;

WS: ([ \t\r\n]+) -> skip;
Comment: '/*' .*? '*/' -> skip;
LineComment: '//' ~[\r\n]* -> skip;